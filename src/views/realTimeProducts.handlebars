<h1>{{title}}</h1>

<div id="debug-info" style="background-color: #f0f0f0; padding: 10px; margin-bottom: 20px; display: none;">
    <h3>Informaci√≥n de depuraci√≥n</h3>
    <p>Carrito ID: <span id="debug-cart-id">{{cartId}}</span></p>
    <p>Productos cargados: <span id="debug-products-count">{{products.length}}</span></p>
    <button onclick="toggleDebug()">Ocultar</button>
</div>

<button onclick="toggleDebug()" style="margin-bottom: 10px;">Mostrar informaci√≥n de depuraci√≥n</button>

<table border="1">
    <thead>
        <tr>
            <th>ID</th>
            <th>Nombre</th>
            <th>Descripci√≥n</th>
            <th>C√≥digo</th>
            <th>Precio</th>
            <th>Stock</th>
            <th>Categor√≠a</th>
            <th>Estado</th>
            <th>Im√°genes</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody id="product-list">
        {{#if products.length}}
            {{#each products}}
            <tr>
                <td>{{this._id}}</td>
                <td>{{this.title}}</td>
                <td>{{this.description}}</td>
                <td>{{this.code}}</td>
                <td>${{this.price}}</td>
                <td>{{this.stock}}</td>
                <td>{{this.category}}</td>
                <td>{{#if this.status}}‚úîÔ∏è{{else}}‚ùå{{/if}}</td>
                <td>
                    {{#each this.thumbnails}}
                        <img src="{{this}}" alt="Imagen" width="50">
                    {{/each}}
                </td>
                <td>
                    <button onclick="addToCart('{{../cartId}}', '{{this._id}}')">üõí Agregar al carrito</button>
                    <button onclick="deleteProduct('{{this._id}}')">üóë Eliminar</button>
                </td>
            </tr>
            {{/each}}
        {{else}}
            <tr>
                <td colspan="10">‚ùå No hay productos disponibles</td>
            </tr>
        {{/if}}
    </tbody>
</table>

<!-- Formulario para agregar productos -->
<h2>Agregar nuevo producto</h2>
<form id="product-form">
    <div style="margin-bottom: 10px;">
        <label for="title">Nombre:</label>
        <input type="text" id="title" placeholder="Nombre del producto" required />
    </div>
    
    <div style="margin-bottom: 10px;">
        <label for="description">Descripci√≥n:</label>
        <input type="text" id="description" placeholder="Descripci√≥n" required />
    </div>
    
    <div style="margin-bottom: 10px;">
        <label for="code">C√≥digo:</label>
        <input type="text" id="code" placeholder="C√≥digo del producto" required />
    </div>
    
    <div style="margin-bottom: 10px;">
        <label for="price">Precio:</label>
        <input type="number" id="price" placeholder="Precio" required />
    </div>
    
    <div style="margin-bottom: 10px;">
        <label for="stock">Stock:</label>
        <input type="number" id="stock" placeholder="Stock disponible" required />
    </div>
    
    <div style="margin-bottom: 10px;">
        <label for="category">Categor√≠a:</label>
        <input type="text" id="category" placeholder="Categor√≠a" required />
    </div>
    
    <div style="margin-bottom: 10px;">
        <label for="thumbnails">Im√°genes:</label>
        <input type="text" id="thumbnails" placeholder="URLs de im√°genes separadas por coma" />
    </div>

    <button type="submit">Agregar Producto</button>
</form>

<script src="/socket.io/socket.io.js"></script>
<script>
    // Store cartId in a variable accessible to all functions
    const cartId = "{{cartId}}";
    const socket = io();
    
    // Debug function to toggle debug info
    function toggleDebug() {
        const debugInfo = document.getElementById('debug-info');
        if (debugInfo.style.display === 'none') {
            debugInfo.style.display = 'block';
        } else {
            debugInfo.style.display = 'none';
        }
    }

    // Log initial products from server-side rendering
    console.log("Initial products from server:", {
        count: {{products.length}},
        cartId: "{{cartId}}"
    });

    // ‚úÖ Escuchar actualizaci√≥n de productos desde WebSockets
    socket.on('updateProducts', (products) => {
        console.log("üì• Productos recibidos desde WebSocket:", products);
        document.getElementById('debug-products-count').textContent = products.length;
        renderProducts(products);
    });

    function renderProducts(products) {
        const tableBody = document.getElementById('product-list');
        tableBody.innerHTML = '';

        if (!products || products.length === 0) {
            tableBody.innerHTML = '<tr><td colspan="10">‚ùå No hay productos disponibles</td></tr>';
            return;
        }

        products.forEach(product => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${product._id}</td>
                <td>${product.title}</td>
                <td>${product.description}</td>
                <td>${product.code}</td>
                <td>$${product.price}</td>
                <td>${product.stock}</td>
                <td>${product.category}</td>
                <td>${product.status ? '‚úîÔ∏è' : '‚ùå'}</td>
                <td>
                    ${product.thumbnails && product.thumbnails.length > 0 
                      ? product.thumbnails.map(img => `<img src="${img}" alt="Imagen" width="50">`).join('') 
                      : 'Sin im√°genes'}
                </td>
                <td>
                    <button onclick="addToCart('${cartId}', '${product._id}')">üõí Agregar al carrito</button>
                    <button onclick="deleteProduct('${product._id}')">üóë Eliminar</button>
                </td>
            `;
            tableBody.appendChild(row);
        });
    }

    // ‚úÖ Enviar nuevo producto por WebSockets
    document.getElementById('product-form').addEventListener('submit', (event) => {
        event.preventDefault();

        const title = document.getElementById('title').value;
        const description = document.getElementById('description').value;
        const code = document.getElementById('code').value;
        const price = document.getElementById('price').value;
        const stock = document.getElementById('stock').value;
        const category = document.getElementById('category').value;
        const thumbnailsInput = document.getElementById('thumbnails').value;
        
        // Handle empty thumbnails input
        const thumbnails = thumbnailsInput ? thumbnailsInput.split(',').map(url => url.trim()) : [];

        const newProduct = { 
            title, 
            description, 
            code, 
            price: Number(price), 
            stock: Number(stock), 
            category, 
            thumbnails,
            status: true 
        };

        console.log("üì§ Enviando producto:", newProduct);

        socket.emit('newProduct', newProduct);

        document.getElementById('product-form').reset();
    });

    // ‚úÖ Agregar producto al carrito
    function addToCart(cartId, productId) {
        if (!cartId || !productId) {
            console.error("‚ùå Error: Faltan cartId o productId.");
            return;
        }
        
        console.log(`üõí Agregando producto ${productId} al carrito ${cartId}`);
        
        // Use fetch to call the API endpoint
        fetch(`/api/carts/${cartId}/products/${productId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ quantity: 1 })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Error al agregar al carrito');
            }
            return response.json();
        })
        .then(data => {
            console.log("‚úÖ Producto agregado al carrito:", data);
            alert('Producto agregado al carrito correctamente');
        })
        .catch(error => {
            console.error("‚ùå Error:", error);
            alert('Error al agregar el producto al carrito');
        });
    }

    // ‚úÖ Eliminar producto (modificado para eliminar el producto, no del carrito)
    function deleteProduct(productId) {
        if (!productId) {
            console.error("‚ùå Error: Falta productId.");
            return;
        }
        
        if (confirm('¬øEst√°s seguro de que deseas eliminar este producto?')) {
            console.log(`üóë Eliminando producto ${productId}`);
            
            // Enviar el ID del producto a eliminar
            socket.emit('deleteProduct', productId);
        }
    }
</script>

